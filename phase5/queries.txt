Information about rooms:
	SELECT * FROM room NATURAL JOIN isIn WHERE (roomNum=\%(roomNum)s AND 
		building=%(building)s); 

Information about equipment:
	SELECT * FROM isIn NATURAL JOIN room WHERE equipname=%(equipment)s; 

	SELECT * FROM uses NATURAL JOIN event WHERE equipname=%(equipment)s; 

Information about clubs:
	SELECT * FROM club WHERE cEmail=%(club)s;

	SELECT * FROM runBy NATURAL JOIN event WHERE cEmail=%(club)s;

Information about events:
	SELECT * FROM event WHERE EID=%(event)i;

	SELECT * FROM club NATURAL JOIN runBy WHERE EID=%(event)i;

	SELECT * FROM comments WHERE EID=%(event)i;

	SELECT * FROM uses WHERE EID=%(event)i;

	SELECT * 
	FROM reservation
	NATURAL JOIN 
		(SELECT count(r2.RID) AS conflicts, r1.RID
		FROM reservation AS r1, reservation AS r2
		WHERE (r1.startTime, r1.endTime) OVERLAPS (r2.startTime, r2.endTime) 
		AND r1.EID=%(event)i AND r2.EID!=%(event)i
		AND r1.roomNum=r2.roomNum AND r1.building=r2.building 
		GROUP BY r1.RID) AS conflicting;
 
Information about clubs:
	SELECT * 
	FROM users LEFT JOIN student ON email=sEmail LEFT JOIN admin ON
		email=aEmail 
	WHERE (email=%(user)s; 

	SELECT * FROM memberOf NATURAL JOIN club WHERE sEmail=%(user)s; 

	SELECT event.* FROM reservation NATURAL JOIN event WHERE sEmail=%(user)s;

Information about reservations:
	SELECT * FROM reservation NATURAL JOIN event WHERE RID=%(id)s;

	SELECT *
	FROM reservation 
	WHERE (%(start)s, %(end)s) OVERLAPS (startTime, endTime)
		AND RID!=%(id)i
	AND roomNum=%(roomNum)s AND building=%(building)s;


Select all unapproved reservations:
	SELECT * FROM reservation NATURAL JOIN event WHERE aEmail=NULL AND startTime >
		now() ORDER BY startTime; 

Select all overlapping reservations:
	SELECT * 
	FROM reservation AS r1, reservation AS r2
	WHERE (r1.startTime, r1.endTime) OVERLAPS (r2.startTime, r2.endTime) 
		AND r1.RID < r2.RID 
		AND r1.roomNum=r2.roomNum AND r1.building=r2.building
		ORDER BY r1.startTime; 

Search for room based on date and time:
	SELECT room.* FROM room 
	WHERE NOT EXISTS 
		(SELECT * 
		FROM reservation AS r 
		WHERE r.roomnum = %(roomnum)s AND r.building = %(building)s AND (%(start)s, %(end)s)
			OVERLAPS (r.startTime, r.endTime)); 

Search for room based on Equipment
BEGIN;
CREATE TEMPORARY TABLE search_546534 (equipname VARCHAR(32)) ON COMMIT DROP;
	INSERT INTO search_546534 VALUES (%(val)s), (%(val)s);
	SELECT * 
	FROM room 
	WHERE NOT EXIST 
		((SELECT * FROM search_546534) EXCEPT
			(SELECT equipname 
			FROM isIN 
			WHERE roomNum=%(roomNum)s and building=%(building)s));
COMMIT;

Search for room based on occupancy: 
	SELECT room.* 
	FROM room 
	WHERE %(min)i <= occupancy AND occupancy <= %(max)i; 

Random statistics:
Most used rooms:
	SELECT count(*),building,roomNum 
	FROM room NATURAL JOIN reservation 
	GROUP BY building,roomNum;

Students who run most events:
	SELECT count(*),sEmail FROM reservation NATURAL JOIN student 
	GROUP BY sEmail;

Majors which runs most events:
	SELECT count1+count2 AS count 
	FROM 
		(SELECT count(*) AS count1, major1 AS major 
		FROM reservation NATURAL JOIN students GROUP BY major1) AS
someone
	NATURAL JOIN
		(SELECT count(*) AS count2, major2 AS major 
		FROM reservation NATURAL JOIN students GROUP BY major2) AS
something;


All equipment currently used:
	SELECT DISTINCT equipName FROM uses UNION SELECT DISTINCT equipName FROM isIn;
